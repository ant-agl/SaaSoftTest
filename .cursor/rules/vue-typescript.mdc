---
globs: *.vue,*.ts,*.js
---

# Vue + TypeScript Правила

## Общие принципы

- Используй Composition API с `<script setup lang="ts">`
- Всегда добавляй типизацию для props, emits, refs и computed
- Предпочитай чистые функции и минимальные зависимости
- Формат кода должен быть совместим с ESLint + Prettier
- Комментарии пиши на русском языке

## Структура компонентов

```vue
<template>
  <!-- Используй компоненты Ant Design -->
</template>

<script setup lang="ts">
// Импорты в порядке: Vue, библиотеки, локальные
import { ref, computed, onMounted } from "vue";
import { Button, Table } from "ant-design-vue";
import { Search } from "lucide-vue-next";

// Типы
interface Props {
  data: SomeType[];
  loading?: boolean;
}

interface Emits {
  (e: "update", value: string): void;
  (e: "delete", id: number): void;
}

// Props и Emits
const props = withDefaults(defineProps<Props>(), {
  loading: false,
});

const emit = defineEmits<Emits>();

// Реактивные данные
const searchValue = ref("");

// Computed
const filteredData = computed(() => {
  return props.data.filter((item) => item.name.includes(searchValue.value));
});

// Методы
const handleSearch = () => {
  // логика поиска
};
</script>
```

## Типизация

- Всегда типизируй props с `interface` и `withDefaults`
- Используй `defineEmits<Emits>()` для событий
- Типизируй refs: `const count = ref<number>(0)`
- Типизируй computed: `const doubled = computed<number>(() => count.value * 2)`
