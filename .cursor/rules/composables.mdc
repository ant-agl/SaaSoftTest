---
globs: src/**/*.ts,src/**/*.vue
---

# Composables (Композиционные функции)

## Выносить в composables

- Бизнес-логику компонентов
- Переиспользуемую логику между компонентами
- Сложные вычисления и побочные эффекты
- Работу с API и состоянием

## Структура composables

```typescript
// shared/composables/useTableData.ts
import { ref, computed } from "vue";
import type { Ref } from "vue";

export function useTableData<T>(
  initialData: T[] = [],
  options: UseTableDataOptions = {}
) {
  const data = ref<T[]>(initialData);
  const loading = ref(false);
  const pagination = ref({
    current: 1,
    pageSize: 10,
    total: 0,
  });

  const filteredData = computed(() => {
    // логика фильтрации
    return data.value;
  });

  const loadData = async () => {
    loading.value = true;
    try {
      // загрузка данных
    } finally {
      loading.value = false;
    }
  };

  return {
    data,
    loading,
    pagination,
    filteredData,
    loadData,
  };
}

interface UseTableDataOptions {
  pageSize?: number;
  autoLoad?: boolean;
}
```

## Использование в компонентах

```vue
<script setup lang="ts">
import { useTableData } from "@/shared/composables/useTableData";
import type { User } from "@/entities/user/model/Types";

const {
  data: users,
  loading,
  pagination,
  loadData,
} = useTableData<User>([], { pageSize: 20 });

onMounted(() => {
  loadData();
});
</script>
```

## Популярные composables

- `useTableData` - работа с табличными данными
- `useForm` - управление формами
- `useModal` - управление модальными окнами
- `usePagination` - пагинация
- `useSearch` - поиск и фильтрация
- `useApi` - уже есть в shared/api

## Правила именования

- Начинать с `use`
- Описательное имя: `useUserPermissions`, `useTableFilters`
- Типизировать параметры и возвращаемые значения
- Документировать сложную логику
